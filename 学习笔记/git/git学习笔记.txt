日常开发中，Git的基本常用命令
git clone
git checkout -b dev
git add
git commit
git log
git diff
git status
git pull/git fetch
git push


第一步：克隆远程版本库到本地
克隆远程版本库：
git clone url  

第二步：新建一个开发分支，比如新建开发分支dev
创建分支：
git checkout -b dev   创建开发分支dev，并切换到该分支下

git add的使用格式：
git add .	添加当前目录的所有文件到暂存区
git add [dir]	添加指定目录到暂存区，包括子目录
git add [file1]	添加指定文件到暂存区

git add的使用格式：
git commit -m [message] 提交暂存区到仓库区,message为说明信息
git commit [file1] -m [message] 提交暂存区的指定文件到本地仓库
git commit --amend -m [message] 使用一次新的commit，替代上一次提交

git status,表示查看工作区状态，使用命令格式：
git status  查看当前工作区暂存区变动
git status -s  查看当前工作区暂存区变动，概要信息
git status  --show-stash 查询工作区中是否有stash（暂存的文件）

git log查看提交历史/提交日志:
git log  查看提交历史
git log --oneline 以精简模式显示查看提交历史
git log -p <file> 查看指定文件的提交历史
git blame <file> 一列表方式查看指定文件的提交历史

git diff的使用格式：
git diff 显示暂存区和工作区的差异
git diff filepath   filepath路径文件中，工作区与暂存区的比较差异
git diff HEAD filepath 工作区与HEAD ( 当前工作分支)的比较差异
git diff branchName filepath 当前分支的文件与branchName分支的文件的比较差异
git diff commitId filepath 与某一次提交的比较差异

git pull/git fetch的使用格式：
git pull  拉取远程仓库所有分支更新并合并到本地分支。
git pull origin master 将远程master分支合并到当前本地master分支
git pull origin master:master 将远程master分支合并到当前本地master分支，冒号后面表示本地分支
git fetch --all  拉取所有远端的最新代码
git fetch origin master 拉取远程最新master分支代码
git push 可以推送本地分支、标签到远程仓库，也可以删除远程分支哦。
git push origin master 将本地分支的更新全部推送到远程仓库master分支。
git push origin -d <branchname>   删除远程branchname分支
git push --tags 推送所有标签

git branch的使用格式：
git branch    查看本地所有的分支
git branch -r  查看所有远程的分支
git branch -a  查看所有远程分支和本地分支
git branch -D <branchname>  删除本地branchname分支
git checkout master 切换到master分支

git merge的使用格式：
git merge master  在当前分支上合并master分支过来
git merge --no-ff origin/dev  在当前分支上合并远程分支dev
git merge --abort 终止本次merge，并回到merge前的状态

git checkout的使用格式：
git checkout [file]  丢弃某个文件file
git checkout .  丢弃所有文件

git reset的使用格式：
git reset HEAD --file
回退暂存区里的某个文件，回退到当前版本工作区状态
git reset –-soft 目标版本号 可以把版本库上的提交回退到暂存区，修改记录保留
git reset –-mixed 目标版本号 可以把版本库上的提交回退到工作区，修改记录保留
git reset –-hard  可以把版本库上的提交彻底回退，修改的记录全部revert。

先看一个粟子demo吧，代码git add到暂存区，并未commit提交,就以下酱紫回退，如下：
git reset HEAD file 取消暂存
git checkout file 撤销修改

再看另外一个粟子吧，代码已经git commit了，但是还没有push：
git log  获取到想要回退的commit_id
git reset --hard commit_id  想回到过去，回到过去的commit_id

如果代码已经push到远程仓库了呢，也可以使用reset回滚哦(这里大家可以自己操作实践一下哦)~
git log
git reset --hard commit_id
git push origin HEAD --force

当然，如果代码已经推送到远程的话，还可以考虑revert回滚呢
git log  得到你需要回退一次提交的commit id
git revert -n <commit_id>  撤销指定的版本，撤销也会作为一次提交进行保存

git tag的使用格式：
git tag  列出所有tag
git tag [tag] 新建一个tag在当前commit
git tag [tag] [commit] 新建一个tag在指定commit
git tag -d [tag] 删除本地tag
git push origin [tag] 推送tag到远程
git show [tag] 查看tag
git checkout -b [branch] [tag] 新建一个分支，指向某个tag

git rebase的使用格式：
git stash  把当前的工作隐藏起来 等以后恢复现场后继续工作
git stash list 显示保存的工作进度列表
git stash pop stash@{num} 恢复工作进度到工作区
git stash show ：显示做了哪些改动
git stash drop stash@{num} ：删除一条保存的工作进度
git stash clear 删除所有缓存的stash。

git reflog的使用格式：
git blame filepath
git blame 记录了某个文件的更改历史和更改人，可以查看背锅人，哈哈!!

git remote的使用格式：
git remote   查看关联的远程仓库的名称
git remote add url   添加一个远程仓库
git remote show [remote] 显示某个远程仓库的信息
